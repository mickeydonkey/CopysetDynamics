from scipy.special import comb
from cluster_simu.cluster import Cluster
import matplotlib.pyplot as plt
import random
import numpy as np

def get_copysets_member(node, copysets):
    members = set()
    for k,sets in copysets.items():
        if node in sets:
            for n in sets:
                members.add(n)
    if node in members:
        members.remove(node)
    return members

def check_internal_dup(copysets_dict):
    copyset = set()
    nodes = set()
    for k,v in copysets_dict.items():
        node_set = set(v)
        if len(v) != 3:
            print("{} has illegal size {} with {}".format(k, len(v), v))
        elif len(node_set) < 3:
            print("{} has duplicated node {}".format(k, v))
        if tuple(sorted(v)) in copyset:
            print("duplicated copyset {}".format(v))
        else:
            copyset.add(tuple(sorted(v)))
        for n in v:
            nodes.add(n)

    scatter_dict = dict()
    for n in nodes:
        members = get_copysets_member(n, copysets_dict)
        scatter_dict[n] = len(members)
    for k,v in scatter_dict.items():
        if v < 4:
            print("node {} has scatter width {}".format(k, v))


N = 1000
R = 3
S = 4

steps = 500
c = Cluster(N, R, S, init = 'greedy')

for i in range(steps):
    c.add_n_nodes(1)

print("#copysets before merge: {}".format(len(c.greedy_copysets)))

c.node_leave_copyset()
c.merge_copyset()

c_base = Cluster(c.n, c.r, c.s, init = 'greedy')

print("#copysets after first merge: {}".format(c.get_copysets_number()))
print("#copysets generated by greedy: {}".format(c_base.get_copysets_number()))

copysets_dict = c.get_and_set_greedy_copysets()

check_internal_dup(copysets_dict)

#print(c.get_node_count_by_copyset())
#print(c.get_copyset_count_by_node())

c.merge_copyset()

print("#copysets after second merge: {}".format(c.get_copysets_number()))

#print(c.get_node_count_by_copyset())
#print(c.get_copyset_count_by_node())

copysets_dict = c.get_and_set_greedy_copysets()

check_internal_dup(copysets_dict)

