from scipy.special import comb
from cluster_simu.cluster import Cluster
import matplotlib.pyplot as plt
import random
import numpy as np
import logging

logging.basicConfig(level=logging.DEBUG)

def get_copysets_member(node, copysets):
    members = set()
    for k,sets in copysets.items():
        if node in sets:
            for n in sets:
                members.add(n)
    if node in members:
        members.remove(node)
    return members

def check_internal_dup(copysets_dict):
    copyset = set()
    nodes = set()
    for k,v in copysets_dict.items():
        node_set = set(v)
        if len(v) != 3:
            print("{} has illegal size {} with {}".format(k, len(v), v))
        if len(node_set) < 3:
            print("{} might have duplicated node {}".format(k, v))
        if tuple(sorted(v)) in copyset:
            print("duplicated copyset {}".format(v))
        else:
            copyset.add(tuple(sorted(v)))
        for n in v:
            nodes.add(n)

    scatter_dict = dict()
    for n in nodes:
        members = get_copysets_member(n, copysets_dict)
        scatter_dict[n] = len(members)
    for k,v in scatter_dict.items():
        if v < 4:
            print("node {} has scatter width {}".format(k, v))


N = 1000
R = 3
S = 4

steps = 2
c = Cluster(N, R, S, init = 'greedy')

count = 0
x = []
copysets_number = []

x_cost = []
cost = []

for repeat in range(50):

    for i in range(steps):
        logging.info(count)
        x.append(count)
        copysets_number.append(len(c.greedy_copysets))
        count += 1
        diff = c.n // 100
        c.add_n_nodes(diff)
        nodes = list(c.get_node_indices())
        indices = random.sample(nodes, k=diff)
        c.remove_nodes(indices)

    #print("#copysets before merge: {}".format(len(c.greedy_copysets)))

    c.node_leave_copyset()
    c.merge_copyset()

    #print("#copysets after first merge: {}".format(c.get_copysets_number()))
    #print("#copysets generated by greedy: {}".format(c_base.get_copysets_number()))

    #copysets_dict = c.get_and_set_greedy_copysets()

    #check_internal_dup(copysets_dict)

    #print(c.get_node_count_by_copyset())
    #print(c.get_copyset_count_by_node())

    x.append(count)
    cost.append(c.merge_cost)
    x_cost.append(count)
    count += 1
    copysets_number.append(len(c.greedy_copysets))


plt.figure(figsize=(10,5))
plt.plot(x, copysets_number, 'r.')
plt.xlabel("time")
plt.ylabel("#copysets")
plt.savefig('merge_result.png')

plt.figure()
plt.plot(x_cost, cost, 'r.')
plt.xlabel("time")
plt.ylabel("cost")
plt.savefig('merge_cost.png')
